import animm from 'js/anim-manager.js'
import appm from 'js/app-manager'

class {
    onCreate() {
        this.state = {
            text: ''
        }

        this.hide = this.hide.bind(this)
        this.show = this.show.bind(this)
    }

    onMount() {
        this.root = this.getEl()

        appm.on('scroll', this.hide)
        appm.on('hideTooltip', this.hide)
        appm.on('showTooltip', this.show)
    }

    onDestroy() {
        appm.off('scroll', this.hide)
        appm.off('hideTooltip', this.hide)
        appm.off('showTooltip', this.show)
    }

    // Functions.

    hide() {
        if(!this.visible) {
            return
        }

        animm.add(this.root, { '--scale': 0.9, duration: 0.2, easeOut: 'quart' })
        this.getEl().classList.remove('visible')
        this.visible = false
    }

    show(text, extraClasses, boundingRect) {
        if(this.previousClasses) {
            this.root.classList.remove(...this.previousClasses)
        }

        this.visible = true
        this.state.text = text

        this.root.classList.remove('bottom', 'left', 'right')

        if(extraClasses) {
            this.root.classList.add(...extraClasses)
        }

        this.previousClasses = extraClasses

        animm.add(this.root, { '--scale': 1, duration: 0.2, easeOut: 'quart' })

        if(extraClasses.includes('side')) {
            this.root.classList.add('left')
            this.root.style.top = `${boundingRect.top + boundingRect.height /2}px`
            this.root.style.left = `${boundingRect.left + boundingRect.width}px`
        }
        else {
            this.root.style.left = `${boundingRect.left + boundingRect.width / 2}px`
            this.root.style.top = `${boundingRect.top}px`
        }

        setTimeout(() => {
            const rootBoundingRect = this.root.getBoundingClientRect()

            if(rootBoundingRect.top < 50 && !extraClasses.includes('side')) {
                this.root.style.top = `${boundingRect.top + boundingRect.height}px`
                this.root.classList.add('bottom')
            }

            if(rootBoundingRect.left < 0) {
                this.root.classList.add('left')
            }
            else if(rootBoundingRect.right + rootBoundingRect.width / 2 > window.innerWidth) {
                this.root.classList.add('right')
            }

            if(this.visible) {
                this.root.classList.add('visible')
            }
        }, 1)
    }
}

<div.tooltip>
    <span>
        $!{state.text}
    </span>

    <div.pointer />
</div>

style.less {
    .tooltip {
        --backgroundcolor: var(--color-background1);
        --border: 1px solid var(--color-border1);
        --fontsize: 15px;
        --padding: 5px 10px;
        --scale: 0.9;
        --translation-x: -50%;
        --translation-y: calc(-100% - 15px);

        @pointerSize: 10px;
        @pointerDistance: 15px;

        background-color: var(--backgroundcolor);
        border: var(--border);
        border-radius: var(--app-borderradius);
        color: var(--color-text3);
        font-size: var(--fontsize);
        opacity: 0;
        padding: var(--padding);
        pointer-events: none;
        position: fixed;
        text-align: center;
        white-space: nowrap;
        z-index: 5;
        .box-shadow(0 2px 10px 0 fade(@color-black, 10));
        .flex-center();
        .transform(translate(var(--translation-x), var(--translation-y)) scale(var(--scale)));

        >.pointer {
            background-color: var(--backgroundcolor);
            border: var(--border);
            border-left: none;
            border-top: none;
            position: absolute;
            top: calc(100% + 1px);
            .size(10px);
            .transform(translateY(-50%) rotate(45deg));
        }

        &.visible {
            opacity: 1;
        }

        &.bottom {
            --translation-y: @pointerSize;

            >.pointer {
                border: var(--border);
                border-bottom: none;
                border-right: none;
                bottom: 100%;
                top: unset;
                .transform(translateY(50%) rotate(45deg));
            }
        }

        &.left {
            --translation-x: calc(-1 * (@pointerDistance + @pointerSize / 2));

            text-align: left;

            >.pointer {
                left: @pointerDistance;
            }
        }

        &.right {
            --translation-x: calc(-100% + @pointerDistance + @pointerSize / 2);

            text-align: right;

            >.pointer {
                right: @pointerDistance;
            }
        }

        &.side {
            --fontsize: 17px;
            --padding: 5px 10px;
            --translation-x: 10px;
            --translation-y: -50%;

            color: var(--color-text3);
            font-family: @font-medium;
            text-align: left;

            >.pointer {
                border: var(--border);
                border-right: none;
                border-top: none;
                left: 0;
                top: 50%;
                .transform(translateX(-50%) translateY(-50%) rotate(45deg));
            }
        }

        // Media queries

        .r-max(@break-md, {
            display: none;
        });
    }
};