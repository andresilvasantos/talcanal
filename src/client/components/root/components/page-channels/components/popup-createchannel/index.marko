import appm from 'js/app-manager'
import { channelTypes } from 'js/default-vars'
import { textToPathUrl, validateChannelId, validateChannelName } from 'js/utils'

class {
    onCreate() {
        this.state = {
            status: 0,
            type: 'public'
        }

        this.created = this.created.bind(this)
        this.createError = this.createError.bind(this)
    }

    onMount() {
        this.errorMessages = appm.tr('status')
        this.popupComponent = this.getComponent('popup')

        appm.on('createItemError', this.createError)
        appm.on('createItemSuccess', this.created)
    }

    onDestroy() {
        appm.off('createItemError', this.createError)
        appm.off('createItemSuccess', this.created)
    }

    // Getters & Setters.

    setStatus(status) {
        this.state.status = status
    }

    setType(type) {
        this.state.type = type

        appm.addAnalyticsEvent('createChannel', 'typeChange', this.state.type)
    }

    // Functions.

    created(type, idRequest, channel) {
        if(idRequest != this.idRequest) {
            return
        }

        this.state.status = 0

        this.hide()
        appm.openPage('channels', 'channel', false, channel)
    }

    createError(type, idRequest, error) {
        if(idRequest != this.idRequest) {
            return
        }

        switch(error) {
        case 1:
            this.idComponent.setValid(false)
            this.statusMessage.setMessage(this.errorMessages.channelIdAlreadyExists)
            break
        case -1:
            this.statusMessage.setMessage(this.errorMessages.invalidUser)
            break
        case -100:
            this.statusMessage.setMessage(this.errorMessages.problemReachingServers)
            break
        default:
            this.statusMessage.setMessage(this.errorMessages.problemUnknown)
            break
        }

        this.state.status = -1
    }

    hide() {
        if(!this.visible) {
            return
        }

        this.popupComponent.hide()
    }

    hidden() {
        this.state.status = 0
        this.visible = false
    }

    keyPressed(event) {
        switch(event.keyCode) {
            case 13: // Enter
                this.submitRequested()
                break
            case 27:
                this.hide()
        }
    }

    nameChanged(name) {
        const idComponent = this.getComponent('inputId')

        idComponent.setValue(textToPathUrl(name).replaceAll(/[^A-Za-z0-9-]/g,''))
    }

    show() {
        if(this.visible) {
            return
        }

        this.visible = true

        this.popupComponent.show()
    }

    submitRequested() {
        if(this.state.status == 1) {
            return
        }

        this.adultContentComponent = this.getComponent('checkboxAdultContent')
        this.idComponent = this.getComponent('inputId')
        this.nameComponent = this.getComponent('inputName')
        this.statusMessage = this.getComponent('statusMessage')

        const id = this.idComponent.getValue()
        const name = this.nameComponent.getValue()
        const type = this.state.type
        const adultContent = this.adultContentComponent.isChecked()

        this.statusMessage.hide()

        let validData = true

        if(!validateChannelId(id)) {
            this.idComponent.setValid(false, this.errorMessages.invalidIdChannel)
            validData = false
        }

        if(name && !validateChannelName(name)) {
            this.nameComponent.setValid(false, this.errorMessages.invalidNameChannel)
            validData = false
        }

        if(!validData) {
            return
        }

        this.state.status = 1

        this.data = {
            id,
            adultContent,
            name,
            type
        }

        this.idRequest = appm.createItem('channels', this.data)
    }
}

$ const trCreateChannel = appm.tr('channels.createChannel') || {}
$ const trInputs = trCreateChannel.inputs || {}

<popup.popup-createchannel
    key='popup'
    class=input.class
    title=trCreateChannel.title
    on-hidden('hidden')
    on-keyPressed('keyPressed')
>
    <@form>
        <div.inputs>
            <input-text.big.input-name
                key='inputName'
                maxlength=30
                noExternalUpdate
                placeholder=trInputs.name
                on-valueChanged('nameChanged')
            />

            <input-text.big.input-id
                key='inputId'
                icon='channel'
                maxlength=20
                noExternalUpdate
                placeholder=trInputs.id
            />
        </div>

        <div.wrapper-types>
            <for|type| of=channelTypes>
                $ const selected = type.id == state.type

                <card-channeltype
                    class=(selected ? 'selected' : '')
                    type=type
                    on-click('setType', type.id)
                />
            </for>
        </div>

        <checkbox.checkbox-adultcontent
            key='checkboxAdultContent'
            text=trInputs.adultContent
        >
            <icon.icon-adults name='circle' />
        </checkbox>

        <status-message key='statusMessage' />

        <button-submit.big
            loading=(state.status == 1)
            text=trCreateChannel.buttonSubmit
            on-click('submitRequested')
        />
    </@form>
</popup>

style.less {
    .popup-createchannel {
        --inputs-gridcount: 2;
        --inputs-spacing: 15px;
        --types-gridcount: 3;
        --types-spacing: 15px;

        >.wrapper>.panel>.form {
            >.inputs {
                .grid(var(--inputs-gridcount), var(--inputs-spacing), var(--inputs-spacing));

                >.input-id {
                    --icon-size: 22px;
                }
            }

            >.wrapper-types {
                display: flex;
                .grid(var(--types-gridcount), var(--types-spacing), var(--types-spacing));
            }

            >.checkbox-adultcontent {
                >.wrapper>.icon-adults {
                    color: var(--color-warning);
                    display: flex;
                    .size(20px);
                }
            }

            >.status-message {
                align-self: center;
            }

            >.button-submit {
                align-self: center;
            }
        }

        // Media queries.

        .r-max(@break-ms, {
            --inputs-gridcount: 1;
            --types-gridcount: 1;
        });
    }
};