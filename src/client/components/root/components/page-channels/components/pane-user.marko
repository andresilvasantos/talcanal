import appm from 'js/app-manager'
import {
    dateToTime,
    elapsedDateToShortString,
    getCookie,
    getIndexFromId,
    isMobile,
    processObjectsTr,
    scrollReachBottom,
    setCookie
} from 'js/utils'
import { timers, urls, viewModes } from 'js/default-vars'

static const sortOptions = ['new', 'trending', 'topDay', 'topWeek', 'topMonth', 'topYear', 'topAllTime']

class {
    onCreate() {
        this.state = {
            countItems: 0,
            fetchingItems: true,
            indexSort: 0,
            indexViewMode: 0,
            items: [],
            showChannelsMod: false,
            typeData: 'posts',
            user: appm.getUser(),
            userProfile: {}
        }

        this.filter = ''
        this.pageCurrent = 0

        this.chatCreated = this.chatCreated.bind(this)
        this.itemDeleted = this.itemDeleted.bind(this)
        this.itemPinned = this.itemPinned.bind(this)
        this.itemsFetched = this.itemsFetched.bind(this)
        this.userChanged = this.userChanged.bind(this)
        this.userUpdated = this.userUpdated.bind(this)
    }

    onMount() {
        appm.on('createItemSuccess', this.chatCreated)
        appm.on('deleteItemSuccess', this.itemDeleted)
        appm.on('fetchItemsSuccess', this.itemsFetched)
        appm.on('pinItemSuccess', this.itemPinned)
        appm.on('userChanged', this.userChanged)
        appm.on('userUpdated', this.userUpdated)
    }

    onDestroy() {
        clearTimeout(this.timeoutBetweenFetches)

        appm.off('createItemSuccess', this.chatCreated)
        appm.off('deleteItemSuccess', this.itemDeleted)
        appm.off('fetchItemsSuccess', this.itemsFetched)
        appm.off('pinItemSuccess', this.itemPinned)
        appm.off('userChanged', this.userChanged)
        appm.off('userUpdated', this.userUpdated)
    }

    // Getters & Setters.

    setData(user) {
        this.state.userProfile = Object.assign({}, user)
        this.state.typeData = 'posts'
        this.pageCurrent = 0

        const searchSortComponent = this.getComponent('searchSort')

        if(searchSortComponent) {
            searchSortComponent.clearSearch()
        }

        // Set sort if it was saved in cookies.
        const indexSort = sortOptions.indexOf(getCookie('sortProfile'))

        if(indexSort >= 0) {
            this.state.indexSort = indexSort
        }

        this.calculateViewMode()

        // This validates if user received is already data populated.
        if(!this.state.userProfile.hasOwnProperty('karma')) {
            this.fetchUser()
        }
        else {
            this.fetchItems()
        }
    }

    // Functions.

    calculateViewMode() {
        switch(this.state.typeData) {
            case 'comments':
                this.state.indexViewMode = 1
                break
            case 'posts':
                this.state.indexViewMode = getIndexFromId(
                    viewModes,
                    appm.isUserSignedIn() ? appm.getUser().preferences.viewMode : [],
                    getCookie('viewMode')
                )
                break
        }
    }

    channelRequested(channel, newTab = false) {
        appm.openPage('channels', 'channel', { allowBack: true, newTab }, channel)
    }

    chatCreated(type, idRequest, chat) {
        if(type != 'chats' || idRequest != this.idRequestChat) {
            return
        }

        appm.openPage('chats', 'chat', true, chat)
    }

    chatRequested() {
        this.idRequestChat = appm.createItem('chats', { user: this.state.userProfile.username })
        appm.addAnalyticsEvent('user', 'chatRequested')
    }

    checkLoadMore() {
        if(
            this.state.fetchingItems ||
            !this.state.items.length ||
            this.state.items.length >= this.state.countItems ||
            !scrollReachBottom(this.getEl())
        ) {
            return
        }

        ++this.pageCurrent

        this.fetchItems()
        appm.addAnalyticsEvent('user', 'loadMore', this.state.typeData)
    }

    commentDeleted(idComment) {
        if(this.state.typeData != 'comments') {
            return
        }

        this.deleteItem(idComment)
    }

    commentRequested(comment, newTab = false) {
        const post = comment.post || {}
        const channel = post.channel || {}

        appm.openPage('channels', 'comment', { allowBack: true, newTab },
            { id: post.id, channel: { id: channel.id }}, comment.id)
        appm.addAnalyticsEvent('user', 'openComment')
    }

    controlRequested(idControl) {
        switch(idControl) {
            case 'chat':
                this.chatRequested()
                break
            case 'ban':
            case 'unban':
                appm.banUser(this.state.userProfile.username)
                break
            case 'block':
                this.state.user.usersBlocked.push({ _id: this.state.userProfile._id })

                appm.updateAccount({ usersBlocked: this.state.user.usersBlocked })
                appm.addAnalyticsEvent('user', 'block')
                break
            case 'unblock':
                for(const [index, user] of this.state.user.usersBlocked.entries()) {
                    if(user.username == this.state.userProfile.username) {
                        this.state.user.usersBlocked.splice(index, 1)
                        break
                    }
                }

                appm.updateAccount({ usersBlocked: this.state.user.usersBlocked })
                appm.addAnalyticsEvent('user', 'unblock')
                break
            case 'report':
                appm.showPopup('report', 'users', this.state.userProfile.username)
                appm.addAnalyticsEvent('user', 'report')
                break
            case 'copyUrl':
            case 'message':
                const url = `${urls.domain}/u/${this.state.userProfile.username}`

                if(idControl == 'copyUrl') {
                    appm.copyToClipboard(url)
                }
                else {
                    appm.showPopup('sendMessage', `<a href='${url}'>${url}</a>`)
                }

                appm.addAnalyticsEvent('user', 'shareProfile')
                break
        }
    }

    deleteCommentRequested(comment) {
        appm.showPopup('deleteItem', 'comments', comment.id)
    }

    deleteItem(idItem) {
        for(const [index, item] of this.state.items.entries()) {
            if(item.id == idItem) {
                this.state.items.splice(index, 1)
                this.setStateDirty('items')
                return
            }
        }
    }

    deletePostRequested(post) {
        appm.showPopup('deleteItem', 'posts', post.id)
    }

    fetchItems() {
        this.state.fetchingItems = true

        if(!this.pageCurrent) {
            this.state.countItems = 0
            this.state.items = []
        }

        if(this.timeoutBetweenFetches) {
            clearTimeout(this.timeoutBetweenFetches)
        }

        this.timeoutBetweenFetches = setTimeout(() => {
            this.idFetchItems = appm.fetchItems(this.state.typeData, this.filter,
            { creator: this.state.userProfile._id }, this.pageCurrent, sortOptions[this.state.indexSort])
        }, timers.betweenFetches)
    }

    fetchUser() {
        this.idFetchUser = appm.fetchItems(
            'users', '', { username: this.state.userProfile.username }
        )
    }

    itemDeleted(type, id) {
        if(this.state.typeData != type) {
            return
        }

        this.deleteItem(id)
    }

    itemPinned(type, id, pinned) {
        if(type != 'posts' || this.state.typeData != 'posts') {
            return
        }

        for(const post of this.state.items) {
            if(post.id == id) {
                post.pinnedToProfile = pinned

                this.setStateDirty('items')
                break
            }
        }
    }

    itemsFetched(idFetch, items, count) {
        switch(idFetch) {
            case this.idFetchItems:
                this.state.fetchingItems = false
                this.state.countItems = count

                if(this.pageCurrent > 0) {
                    const itemsUnique = items.filter(item => !this.idsItems.includes(item.id))

                    this.state.items = this.state.items.concat(itemsUnique)
                    this.idsItems = this.idsItems.concat(itemsUnique.map(item => item.id))
                }
                else {
                    this.state.items = items
                    this.idsItems = items.map(item => item.id)
                }

                break
            case this.idFetchUser:
                this.state.userProfile = items[0]

                this.fetchItems()
                break
        }
    }

    pinRequested(post) {
        appm.pinItem('posts', post.id, 'profile')
    }

    postRequested(post, newTab = false) {
        appm.openPage('channels', 'post', { allowBack: true, newTab }, post)
        appm.addAnalyticsEvent('user', 'openPost')
    }

    refresh() {
        this.pageCurrent = 0

        this.fetchItems()
        appm.addAnalyticsEvent('user', 'refresh', this.state.typeData)
    }

    searchChanged(search) {
        this.pageCurrent = 0
        this.filter = search

        this.fetchItems()
        appm.addAnalyticsEvent('user', 'search', `${this.state.typeData} - ${this.filter}`)
    }

    searchTag(idTag, channel, newTab) {
        appm.openPage('channels', 'channel', { allowBack: true, newTab }, channel, idTag)
    }

    settingsRequested(newTab = false) {
        appm.openPage('settings', '', { allowBack: true, newTab })
    }

    sortChanged(index) {
        this.pageCurrent = 0
        this.state.indexSort = index

        const idSort = sortOptions[this.state.indexSort]

        setCookie('sortProfile', idSort)

        this.fetchItems()
        appm.addAnalyticsEvent('user', 'sort', `${this.state.typeData} - ${idSort}`)
    }

    tabChanged(index, id) {
        this.filter = ''
        this.pageCurrent = 0
        this.state.typeData = id

        const searchSortComponent = this.getComponent('searchSort')

        if(searchSortComponent) {
            searchSortComponent.clearSearch()
        }

        this.calculateViewMode()
        this.fetchItems()
    }

    toggleChannelsMod() {
        this.state.showChannelsMod = !this.state.showChannelsMod

        appm.addAnalyticsEvent('user', 'toggleChannelsMod', this.state.showChannelsMod)
    }

    userChanged(user) {
        this.state.user = user

        this.refresh()
        this.setStateDirty('user')
    }

    userUpdated(user) {
        this.state.user = user

        this.setStateDirty('user')
    }

    viewModeChanged(index) {
        this.pageCurrent = 0
        this.state.indexViewMode = index

        const idViewMode = viewModes[this.state.indexViewMode].id

        setCookie('viewMode', idViewMode)
        this.fetchItems()
        appm.addAnalyticsEvent('user', 'viewMode', idViewMode)
    }
}

$ const processOptions = (userProfile, user, trOptions) => {
    const options = []

    if(isMobile() && !userProfile.chatRequestsDisabled) {
        options.push({
            id: 'chat',
            icon: 'chat',
        })
    }

    options.push({
        id: 'share',
        icon: 'send',
        children: [{
            id: 'copyUrl',
            icon: 'link'
        }, {
            id: 'message',
            icon: 'envelope'
        }]
    })

    if(user) {
        let isBlocked = false

        for(const userBlocked of user.usersBlocked) {
            if(userBlocked.username == userProfile.username) {
                isBlocked = true
            }
        }

        options.push({
            id: isBlocked ? 'unblock' : 'block',
            danger: !isBlocked,
            icon: isBlocked ? 'check' : 'block',
            special: isBlocked
        })
    }

    options.push({
        id: 'report',
        danger: true,
        icon: 'flag'
    })

    if(user && user.super && user.superActive) {
        const isBanned = userProfile.status == 'banned'

        options.push({
            id: isBanned ? 'unban' : 'ban',
            danger: !isBanned,
            icon: isBanned ? 'check' : 'skull',
            special: isBanned
        })
    }

    return processObjectsTr(options, trOptions)
}

$ const tabs = [{
    id: 'posts',
    icon: 'post'
}, {
    id: 'comments',
    icon: 'comment'
}]

$ const items = state.items || []
$ const userProfile = state.userProfile || {}
$ const isSelf = state.user && state.user._id == userProfile._id
$ const isSuper = state.user && state.user.super && state.user.superActive
$ const channelsMod = isSelf ? appm.getChannelsMod() : userProfile.channelsModerator
$ const image = userProfile.image && userProfile.image.length ? userProfile.image : null
$ const trUser = appm.tr('channels.user') || {}
$ const viewMode = viewModes[state.indexViewMode].id

<pane-default.pane-user
    key='root'
    allowBack
    class=input.class
    idPage=(isSelf ? 'profile' : '')
    titleCustom
    on-refreshRequested('refresh')
>
    <@barTitleCustom>
        <image-circle icon='user' image=image />

        <span.username>
            ${userProfile.username}
        </span>

        <breakpoint-condition break='sm' min>
            <div.details>
                <icon-text.fill icon='karma' text=userProfile.karma />

                <icon-text.fill icon='cake' text=dateToTime(userProfile.createdAt, false) />
            </div>
        </breakpoint-condition>
    </@barTitleCustom>

    <@barControls>
        <if(isSelf)>
            <button-text
                icon='settings'
                text='Editar perfil'
                on-click('settingsRequested', false)
                on-middleClick('settingsRequested', true)
            />
        </if>
        <else>
            $ const trTooltips = trUser.tooltips || {}

            <if(!userProfile.chatRequestsDisabled)>
                <breakpoint-condition break='sm' min>
                    <!-- TODO loading icon for chat creation -->
                    <button-text icon='chat' text=trUser.buttonMessage on-click('chatRequested') />
                </breakpoint-condition>
            </if>

            <button-icon-menu.open-left
                icon='ellipsis'
                iconRotation=90
                options=processOptions(
                    userProfile,
                    state.user,
                    trUser.controls
                )
                tooltip=trTooltips.more
                on-optionRequested('controlRequested')
            />
        </else>
    </@barControls>

    <@barNonSticky>
        <breakpoint-condition break='sm'>
            <div.details>
                <icon-text.fill icon='karma' text=userProfile.karma />

                <icon-text.fill icon='cake' text=dateToTime(userProfile.createdAt, false) />
            </div>
        </breakpoint-condition>

        <if(userProfile.bio && userProfile.bio.length)>
            <text-p.bio>
                $!{userProfile.bio}
            </text-p>
        </if>

        <if(!userProfile.private && channelsMod && channelsMod.length)>
            <button-text.button-togglechannelsmod.small
                icon='shield'
                text=(
                    state.showChannelsMod ?
                    'Esconder canais moderados' :
                    `Ver canais moderados (${channelsMod.length})`
                )
                on-click('toggleChannelsMod')
            />

            <if(state.showChannelsMod)>
                $ const channels = channelsMod.sort(
                    (a, b) => (a.name || a.id).localeCompare(b.name || b.id)
                )

                <div.channelsmod>
                    <for|channel| of=channels>
                        <button-channel
                            channel=channel
                            on-click('channelRequested', channel, false)
                            on-middleClick('channelRequested', channel, true)
                        />
                    </for>
                </div>
            </if>
        </if>

        <if(isSuper && userProfile.flags && userProfile.flags.length)>
            <reports flags=userProfile.flags />
        </if>
    </@barNonSticky>

    <if(!userProfile.private || isSelf || isSuper)>
        <@barExtension>
            <tabs.full-height.hidetext-whensmall
                tabs=processObjectsTr(tabs, trUser.tabs)
                on-tabChanged('tabChanged')
            />

            <combo-searchsort
                key='searchSort'
                countItems=state.countItems
                indexSort=state.indexSort
                indexViewMode=state.indexViewMode
                loading=state.fetchingItems
                sortOptions=sortOptions
                viewModes=(state.typeData == 'posts' ? viewModes : [])
                on-searchChanged('searchChanged')
                on-sortChanged('sortChanged')
                on-viewModeChanged('viewModeChanged')
            />
        </@barExtension>
    </if>

    <@contents class=(
        (
            (userProfile.private && !isSelf && !isSuper) ||
            (!items.length && !state.fetchingItems)
        ) ? 'center' : viewMode
    )>
        <if(userProfile.private && !isSelf && !isSuper)>
            $ const trPrivate = trUser.private || {}

            <contents-empty
                icon='lock'
                noButton
                text=trPrivate.text
                title=trPrivate.title
            />
        </if>
        <else-if(state.typeData == 'posts')>
            <for|post| of=items>
                <card-post
                    allowPin=isSelf
                    hideCreatorInfo
                    isPinned=post.pinnedToProfile
                    post=post
                    viewMode=viewMode
                    on-deleteRequested('deletePostRequested', post)
                    on-openRequested('postRequested', post)
                    on-pinRequested('pinRequested', post)
                    on-searchTagRequested('searchTag')
                />
            </for>

            <if(!items.length && !state.fetchingItems)>
                $ const trNoItems = trUser.noItems || {}

                <contents-empty
                    icon='search'
                    noButton
                    text=trNoItems.text
                    title=trNoItems.titlePosts
                />
            </if>
        </else-if>
        <else-if(state.typeData == 'comments')>
            <for|comment| of=items>
                <card-comment
                    comment=comment
                    hideCreatorInfo
                    on-deleteRequested('deleteCommentRequested', comment)
                    on-openRequested('commentRequested', comment)
                />
            </for>

            <if(!items.length && !state.fetchingItems)>
                $ const trNoItems = trUser.noItems || {}

                <contents-empty
                    icon='search'
                    noButton
                    text=trNoItems.text
                    title=trNoItems.titleComments
                />
            </if>
        </else-if>
    </@contents>

    <@footer>
        <loading-finder show=state.fetchingItems />
    </@footer>
</pane-default>

style.less {
    .pane-default.pane-user {
        --barextra-spacing: 20px;
        --barextra-padding: 10px var(--app-padding) 20px;
        --channelsmod-spacing: 10px;
        --details-spacing: 10px;
        --username-fontsize: 20px;

        .details() {
            align-items: center;
            display: flex;
            flex-wrap: wrap;
            gap: var(--details-spacing);
            width: 100%;

            >.karma {
                >.icon {
                    color: var(--color-accent1);
                }

                >.text {
                    font-family: @font-medium;
                }
            }
        }

        >.bar {
            >.wrapper-title {
                >.image-circle {
                    flex-shrink: 0;
                }

                >.username {
                    color: var(--color-text4);
                    font-family: @font-medium;
                    font-size: var(--username-fontsize);
                }

                >.details {
                    .details();
                }
            }
        }

        >.bar-nonsticky {
            //display: flex;
            //flex-direction: column;
            gap: var(--barextra-spacing);
            padding: var(--barextra-padding);

            >.details {
                .details();
            }

            >.bio {
                color: var(--color-text3);
                word-wrap: break-word;
            }

            >.button-togglechannelsmod {
                align-self: flex-start
            }

            >.channelsmod {
                display: flex;
                flex-wrap: wrap;
                gap: var(--channelsmod-spacing);
            }
        }

        // Media queries.

        .r-max(@break-md, {
            --username-fontsize: 18px;
        });

        .r-max(@break-xs, {
            --username-fontsize: 16px;
        });
    }
};