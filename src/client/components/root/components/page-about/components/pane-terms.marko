import appm from 'js/app-manager'

class {
    onCreate() {
        this.scrollToAnchor = this.scrollToAnchor.bind(this)
    }

    onMount() {
        appm.on('anchorRequested', this.scrollToAnchor)
    }

    onDestroy() {
        appm.off('anchorRequested', this.scrollToAnchor)
    }

    // Getters & Setters.

    setData(numberTopic = -1) {
        this.scrollToAnchor(numberTopic)
    }

    // Functions.

    scrollToAnchor(number) {
        if(number >= 1) {
            const topic = this.getEls('topics')[number - 1]
            const posY = topic.getBoundingClientRect().y
            const barHeight = parseInt(getComputedStyle(topic).getPropertyValue('--barpane-height'))

            window.scrollTo({ top: posY + window.scrollY - (barHeight * 2 + 30), behavior: 'smooth' })
        }
    }
}

$ const trTerms = appm.tr('about.terms') || {}
$ const trIntro = trTerms.intro || {}
$ const trTopics = trTerms.topics || []

<pane-default.pane-terms
    key='root'
    allowBack
    class=input.class
    disableRefresh
    title=trTerms.title
>
    <@contents>
        <section-imagetext.big
            srcImage='/assets/images/about/terms.jpg'
            text=trIntro.text
            title=trIntro.title
        />

        <div.topics>
            <for|topic, index| of=trTopics>
                <div.topic key='topics[]'>
                    <text-title.title>
                        <span.number>${index + 1}.</span> $!{topic.title}
                    </text-title>

                    <text-p.text>
                        $!{topic.text}
                    </text-p>
                </div>
            </for>
        </div>
    </@contents>

    <@footerNonSticky>
        <footer />
    </@footerNonSticky>
</pane-default>

style.less {
    .pane-terms {
        --padding-bottom: 0;
        --topic-spacing: 20px;
        --topics-spacing: 50px;

        >.contents {
            display: flex;
            flex-direction: column;

            >.topics {
                display: flex;
                flex-direction: column;
                flex-grow: 1;
                gap: var(--topics-spacing);
                padding: var(--app-padding-bigger);

                >.topic {
                    display: flex;
                    flex-direction: column;
                    gap: var(--topic-spacing);

                    >.title {
                        color: var(--color-text4);

                        >.number {
                            color: var(--color-accent1);
                        }
                    }

                    >.text {
                        .text-rich(var(--color-text3));
                    }
                }
            }
        }
    }
};