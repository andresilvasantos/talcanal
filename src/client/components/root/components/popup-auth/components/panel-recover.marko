import appm from 'js/app-manager'
import { validatePassword } from 'js/utils'

class {
    onCreate() {
        this.state = {
            status: 0
        }

        this.emailSent = this.emailSent.bind(this)
        this.recoverAccountError = this.recoverAccountError.bind(this)
    }

    onMount() {
        this.errorMessages = appm.tr('status')
        this.statusMessage = this.getComponent('statusMessage')
        this.idUserComponent = this.getComponent('inputIdUser')

        appm.on('recoverAccountSuccess', this.emailSent)
        appm.on('recoverAccountError', this.recoverAccountError)
    }

    onDestroy() {
        appm.off('recoverAccountSuccess', this.emailSent)
        appm.off('recoverAccountError', this.recoverAccountError)
    }

    // Functions

    emailSent() {
        this.state.status = 2
    }

    keyPressed(event) {
        switch(event.keyCode) {
            case 27: // Escape
                this.emit('closeRequested')
                break
            case 13:
                this.submitRequested()
                break
        }
    }

    recoverAccountError(error) {
        switch(error) {
        case 1:
            this.idUserComponent.setValid(false)
            this.statusMessage.setMessage(this.errorMessages.accountIdNotFound)
            break
        case 2:
            this.statusMessage.setMessage(this.errorMessages.emailNotVerified)
            break
        case -100:
            this.statusMessage.setMessage(this.errorMessages.problemReachingServers)
            break
        default:
            this.statusMessage.setMessage(this.errorMessages.problemUnknown)
            break
        }

        this.state.status = -1
    }

    submitRequested() {
        if(this.state.status == 1) {
            return
        }

        const idUser = this.idUserComponent.getValue()

        this.statusMessage.hide()

        let validData = true

        if(idUser.length < 5) {
            this.idUserComponent.setValid(false, this.errorMessages.invalidIdUser)
            validData = false
        }

        if(!validData) {
            return
        }

        this.state.status = 1

        appm.recoverAccount(idUser)
    }
}

$ const trGeneric = appm.tr('generic') || {}
$ const trRecover = appm.tr('auth.recover')
$ const recovered = state.status == 2

<panel-auth.panel-recover
    class=input.class
    idImageBanner='recover'

>
    <if(!recovered)>
        <div.inputs>
            <input-text.big
                key='inputIdUser'
                icon='userId'
                noExternalUpdate
                placeholder=trGeneric.idUser
                on-keyup('keyPressed')
            />
        </div>

        <status-message key='statusMessage' />

        <button-submit.button-recover.big
            loading=(state.status == 1)
            text=trRecover.buttonRecover
            on-click('submitRequested')
        />
    </if>
    <else>
        <text-p.text-emailsent.big>
            $!{trRecover.emailSent}
        </text-p>
    </else>

    <div.other>
        <button-text
            icon='user'
            text='Iniciar sessÃ£o'
            on-click('emit', 'showSignIn')
        />
    </div>
</panel-auth>

style.less {
    .panel-recover {
        --inputs-spacing: 10px;

        >.wrapper {
            >.text-emailsent {
                color: var(--color-text2);
                font-size: calc(var(--fontsize-big) + 2px);
                text-align: left;
            }

            >.inputs {
                display: flex;
                flex-direction: column;
                gap: var(--inputs-spacing);
                width: 100%;
            }
        }

        // Media queries

        .r-max(@break-ms, {
            >.wrapper-image {
                >.banner {
                    >img {
                        object-position: 50% 22%;
                    }
                }
            }
        });
    }
};