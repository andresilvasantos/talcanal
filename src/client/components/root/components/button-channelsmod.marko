import appm from 'js/app-manager'
import { abbreviateNumber } from 'js/utils'

class {
    onCreate() {
        this.menuClosed = this.menuClosed.bind(this)
    }

    onMount() {
        this.rootComponent = this.getComponent('root')

        this.rootComponent.on('menuClosed', this.menuClosed)
    }

    // Functions.

    channelRequested(channel, newTab = false) {
        appm.openPage('channels', 'channel', { allowBack: true, newTab }, channel)

        this.rootComponent.closeMenu()
    }

    channelModsRequested(newTab = false) {
        appm.openPage('channels', 'channels', { allowBack: true, newTab }, 'mod')

        this.rootComponent.closeMenu()
    }

    menuClosed() {
        this.getComponent('buttonMain').getEl().classList.remove('selected')
    }

    showMenu() {
        this.getComponent('buttonMain').getEl().classList.add('selected')
        this.rootComponent.showMenu()

        appm.addAnalyticsEvent('buttonChannelsMod', 'showMenu')
    }
}

$ const processChannels = () => {
    const channels = []
    const channelsMod = appm.getChannelsMod()
    const infoChannels = appm.getDataChannelsMod()

    if(infoChannels) {
        for(const idChannel of Object.keys(infoChannels)) {
            const info = infoChannels[idChannel]
            const count = (
                (info.countCommentsQueue || 0) +
                (info.countMemberRequests || 0) +
                (info.countPostsQueue || 0)
            )

            if(count) {
                for(const channel of channelsMod) {
                    if(channel.id == idChannel) {
                        channels.push({
                            count,
                            id: idChannel,
                            image: channel.image,
                            name: channel.name
                        })

                        break
                    }
                }
            }
        }
    }

    return channels
}

<button-menu.button-channelsmod key='root' class=input.class>
    <@button>
        <button-icon
            key='buttonMain'
            icon=input.icon
            tooltip=input.tooltip
            on-click('showMenu')
        >
            <counter-button count=abbreviateNumber(input.count) />
        </button-icon>
    </@button>

    <@menu>
        $ const channelsMod = processChannels()

        <if(channelsMod.length)>
            <for|channel| of=channelsMod>
                <button-imagetext.button-channelmod.big
                    idImage=channel.image
                    text=(channel.name || channel.id)
                    on-click('channelRequested', channel, false)
                    on-middleClick('channelRequested', channel, true)
                >
                    <counter-button count=abbreviateNumber(channel.count) />
                </button-imagetext>
            </for>
        </if>
        <else>
            <text-p.text-allmoderated>
                Nada a moderar.
            </text-p>
        </else>

        <button-text.button-all.bg-transparent.small
            text='Ver moderados'
            on-click('channelModsRequested', false)
            on-middleClick('channelModsRequested', true)
        />
    </@menu>
</button-menu>

style.less {
    .button-channelsmod {
        >.menu {
            >.button-channelmod {
                padding: 10px 15px; // TODO
                position: relative;

                &:hover {
                    background-color: var(--color-button1);
                }

                >.counter-button {
                    bottom: unset;
                    right: 20px;
                    top: 50%;
                    .translate(50%, -50%);
                }
            }

            >.text-allmoderated {
                color: var(--color-text1);
                padding: var(--app-padding);
            }

            >.button-all {
                border-radius: 0;
                border-top: 1px solid var(--color-border1);
            }
        }
    }
};